== this is a commentary;

== Arithmetics tests;

test_arth = add (id 3) 2;
test_arth2 = add (sub 4 120) (mul 3 5);

== Function basic tests;

test_fct_add_two = \n(add n 2);
test_fct_add_two1 = fct 1;
test_fct_add_two2 = fct 2;
test_fct_double = \n(\x(add n x));
test_fct_double1 = test_fct_double 3 4;


== Booleans tests;

test_if = if (true) 50 60;
test_if2 = if (false) 50 60;
test_if3 = if (and false true) 50 60;
test_if4 = if (and true true) 50 60;
test_if5 = if (or false true) 50 60;
test_if6 = if (and (not false) true) 50 60;

== Delayed expressions;

test_delay1 = add 2 [add 4 5];
test_delay2 = if (eq 0 1) [test_delay2] 3;
test_delay3 = \n(if (eq 0 1) [test_delay3 n] 100); == Changing [test_delay3 n] to (test_delay3 n) will break the code !;
test_delay3_val = test_delay3 1;

== Fibonacci;

test_fibo = \n(if (ls n 1) 1 [add (test_fibo (sub n 1)) (test_fibo (sub n 2))]);
test_fibo1 = test_fibo 1;
test_fibo2 = test_fibo 2;
test_fibo3 = test_fibo 3;
test_fibo4 = test_fibo 4;
test_fibo5 = test_fibo 5;

== Function as argument;

test_eval = __evaluate_with_1 \n(add n 1);
== test_eval2 = __evaluate_with_two_1s \n(\t(add n t));


== test_coll1 = collect (range 1 10) 0 (\rec(\xoop(add xoop rec))); == Sum of naturals from 1 to 10;
== test_coll2 = collect (range 1 10) 0 (\r(\x(add x r))); == Max of a list;

== Recursive tests;

== test_rec1 = \n (add (if (eq n 0) 0 [test_rec1 (sub n 1)] ) 100);
== test_rec1_1 = test_rec1 0;
== test_rec1_2 = test_rec1 5;